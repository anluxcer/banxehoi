#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DomainModel.Entities
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="XeHoi")]
	public partial class DataBaseXeHoiDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAdmin(Admin instance);
    partial void UpdateAdmin(Admin instance);
    partial void DeleteAdmin(Admin instance);
    partial void InsertModel(Model instance);
    partial void UpdateModel(Model instance);
    partial void DeleteModel(Model instance);
    partial void InsertManufacture(Manufacture instance);
    partial void UpdateManufacture(Manufacture instance);
    partial void DeleteManufacture(Manufacture instance);
    partial void InsertThongSoKichThuoc(ThongSoKichThuoc instance);
    partial void UpdateThongSoKichThuoc(ThongSoKichThuoc instance);
    partial void DeleteThongSoKichThuoc(ThongSoKichThuoc instance);
    partial void InsertCxDxR(CxDxR instance);
    partial void UpdateCxDxR(CxDxR instance);
    partial void DeleteCxDxR(CxDxR instance);
    partial void InsertCRCoSo(CRCoSo instance);
    partial void UpdateCRCoSo(CRCoSo instance);
    partial void DeleteCRCoSo(CRCoSo instance);
    partial void InsertKSGX(KSGX instance);
    partial void UpdateKSGX(KSGX instance);
    partial void DeleteKSGX(KSGX instance);
    partial void InsertThongSoHopSo(ThongSoHopSo instance);
    partial void UpdateThongSoHopSo(ThongSoHopSo instance);
    partial void DeleteThongSoHopSo(ThongSoHopSo instance);
    partial void InsertLHSo(LHSo instance);
    partial void UpdateLHSo(LHSo instance);
    partial void DeleteLHSo(LHSo instance);
    partial void InsertProduct(Product instance);
    partial void UpdateProduct(Product instance);
    partial void DeleteProduct(Product instance);
    #endregion
		
		public DataBaseXeHoiDataContext() : 
				base(global::DomainModel.Properties.Settings.Default.XeHoiConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataBaseXeHoiDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataBaseXeHoiDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataBaseXeHoiDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataBaseXeHoiDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Admin> Admins
		{
			get
			{
				return this.GetTable<Admin>();
			}
		}
		
		public System.Data.Linq.Table<Model> Models
		{
			get
			{
				return this.GetTable<Model>();
			}
		}
		
		public System.Data.Linq.Table<Manufacture> Manufactures
		{
			get
			{
				return this.GetTable<Manufacture>();
			}
		}
		
		public System.Data.Linq.Table<ThongSoKichThuoc> ThongSoKichThuocs
		{
			get
			{
				return this.GetTable<ThongSoKichThuoc>();
			}
		}
		
		public System.Data.Linq.Table<CxDxR> CxDxRs
		{
			get
			{
				return this.GetTable<CxDxR>();
			}
		}
		
		public System.Data.Linq.Table<CRCoSo> CRCoSos
		{
			get
			{
				return this.GetTable<CRCoSo>();
			}
		}
		
		public System.Data.Linq.Table<KSGX> KSGXes
		{
			get
			{
				return this.GetTable<KSGX>();
			}
		}
		
		public System.Data.Linq.Table<ThongSoHopSo> ThongSoHopSos
		{
			get
			{
				return this.GetTable<ThongSoHopSo>();
			}
		}
		
		public System.Data.Linq.Table<LHSo> LHSos
		{
			get
			{
				return this.GetTable<LHSo>();
			}
		}
		
		public System.Data.Linq.Table<Product> Products
		{
			get
			{
				return this.GetTable<Product>();
			}
		}
	}
	
	[Table(Name="dbo.Admin")]
	public partial class Admin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _Password;
		
		private string _Email;
		
		private bool _Type;
		
		private string _Name;
		
		private System.Nullable<System.DateTime> _Birthday;
		
		private string _Country;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnTypeChanging(bool value);
    partial void OnTypeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnBirthdayChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthdayChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    #endregion
		
		public Admin()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="Bit NOT NULL")]
		public bool Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Birthday", DbType="DateTime")]
		public System.Nullable<System.DateTime> Birthday
		{
			get
			{
				return this._Birthday;
			}
			set
			{
				if ((this._Birthday != value))
				{
					this.OnBirthdayChanging(value);
					this.SendPropertyChanging();
					this._Birthday = value;
					this.SendPropertyChanged("Birthday");
					this.OnBirthdayChanged();
				}
			}
		}
		
		[Column(Storage="_Country", DbType="NVarChar(50)")]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Model")]
	public partial class Model : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private int _ManufactureID;
		
		private System.Nullable<System.DateTime> _Year;
		
		private EntitySet<Product> _Products;
		
		private EntityRef<Manufacture> _Manufacture;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnManufactureIDChanging(int value);
    partial void OnManufactureIDChanged();
    partial void OnYearChanging(System.Nullable<System.DateTime> value);
    partial void OnYearChanged();
    #endregion
		
		public Model()
		{
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			this._Manufacture = default(EntityRef<Manufacture>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_ManufactureID", DbType="Int NOT NULL")]
		public int ManufactureID
		{
			get
			{
				return this._ManufactureID;
			}
			set
			{
				if ((this._ManufactureID != value))
				{
					if (this._Manufacture.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnManufactureIDChanging(value);
					this.SendPropertyChanging();
					this._ManufactureID = value;
					this.SendPropertyChanged("ManufactureID");
					this.OnManufactureIDChanged();
				}
			}
		}
		
		[Column(Storage="_Year", DbType="Date")]
		public System.Nullable<System.DateTime> Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[Association(Name="Model_Product", Storage="_Products", ThisKey="ID", OtherKey="ModelID")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		[Association(Name="Manufacture_Model", Storage="_Manufacture", ThisKey="ManufactureID", OtherKey="ID", IsForeignKey=true)]
		public Manufacture Manufacture
		{
			get
			{
				return this._Manufacture.Entity;
			}
			set
			{
				Manufacture previousValue = this._Manufacture.Entity;
				if (((previousValue != value) 
							|| (this._Manufacture.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Manufacture.Entity = null;
						previousValue.Models.Remove(this);
					}
					this._Manufacture.Entity = value;
					if ((value != null))
					{
						value.Models.Add(this);
						this._ManufactureID = value.ID;
					}
					else
					{
						this._ManufactureID = default(int);
					}
					this.SendPropertyChanged("Manufacture");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Model = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Model = null;
		}
	}
	
	[Table(Name="dbo.Manufacture")]
	public partial class Manufacture : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Country;
		
		private EntitySet<Model> _Models;
		
		private EntitySet<Product> _Products;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    #endregion
		
		public Manufacture()
		{
			this._Models = new EntitySet<Model>(new Action<Model>(this.attach_Models), new Action<Model>(this.detach_Models));
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Country", DbType="NVarChar(50)")]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[Association(Name="Manufacture_Model", Storage="_Models", ThisKey="ID", OtherKey="ManufactureID")]
		public EntitySet<Model> Models
		{
			get
			{
				return this._Models;
			}
			set
			{
				this._Models.Assign(value);
			}
		}
		
		[Association(Name="Manufacture_Product", Storage="_Products", ThisKey="ID", OtherKey="ManufactureID")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Models(Model entity)
		{
			this.SendPropertyChanging();
			entity.Manufacture = this;
		}
		
		private void detach_Models(Model entity)
		{
			this.SendPropertyChanging();
			entity.Manufacture = null;
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Manufacture = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Manufacture = null;
		}
	}
	
	[Table(Name="dbo.ThongSoKichThuoc")]
	public partial class ThongSoKichThuoc : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private int _CxDxRID;
		
		private int _CRCS;
		
		private int _KSGX;
		
		private EntitySet<Product> _Products;
		
		private EntityRef<CxDxR> _CxDxR;
		
		private EntityRef<CRCoSo> _CRCoSo;
		
		private EntityRef<KSGX> _KSGX1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCxDxRIDChanging(int value);
    partial void OnCxDxRIDChanged();
    partial void OnCRCSChanging(int value);
    partial void OnCRCSChanged();
    partial void OnKSGXChanging(int value);
    partial void OnKSGXChanged();
    #endregion
		
		public ThongSoKichThuoc()
		{
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			this._CxDxR = default(EntityRef<CxDxR>);
			this._CRCoSo = default(EntityRef<CRCoSo>);
			this._KSGX1 = default(EntityRef<KSGX>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_CxDxRID", DbType="Int NOT NULL")]
		public int CxDxRID
		{
			get
			{
				return this._CxDxRID;
			}
			set
			{
				if ((this._CxDxRID != value))
				{
					if (this._CxDxR.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCxDxRIDChanging(value);
					this.SendPropertyChanging();
					this._CxDxRID = value;
					this.SendPropertyChanged("CxDxRID");
					this.OnCxDxRIDChanged();
				}
			}
		}
		
		[Column(Storage="_CRCS", DbType="Int NOT NULL")]
		public int CRCS
		{
			get
			{
				return this._CRCS;
			}
			set
			{
				if ((this._CRCS != value))
				{
					if (this._CRCoSo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCRCSChanging(value);
					this.SendPropertyChanging();
					this._CRCS = value;
					this.SendPropertyChanged("CRCS");
					this.OnCRCSChanged();
				}
			}
		}
		
		[Column(Storage="_KSGX", DbType="Int NOT NULL")]
		public int KSGX
		{
			get
			{
				return this._KSGX;
			}
			set
			{
				if ((this._KSGX != value))
				{
					if (this._KSGX1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnKSGXChanging(value);
					this.SendPropertyChanging();
					this._KSGX = value;
					this.SendPropertyChanged("KSGX");
					this.OnKSGXChanged();
				}
			}
		}
		
		[Association(Name="ThongSoKichThuoc_Product", Storage="_Products", ThisKey="ID", OtherKey="TSKT_ID")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		[Association(Name="CxDxR_ThongSoKichThuoc", Storage="_CxDxR", ThisKey="CxDxRID", OtherKey="ID", IsForeignKey=true)]
		public CxDxR CxDxR
		{
			get
			{
				return this._CxDxR.Entity;
			}
			set
			{
				CxDxR previousValue = this._CxDxR.Entity;
				if (((previousValue != value) 
							|| (this._CxDxR.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CxDxR.Entity = null;
						previousValue.ThongSoKichThuocs.Remove(this);
					}
					this._CxDxR.Entity = value;
					if ((value != null))
					{
						value.ThongSoKichThuocs.Add(this);
						this._CxDxRID = value.ID;
					}
					else
					{
						this._CxDxRID = default(int);
					}
					this.SendPropertyChanged("CxDxR");
				}
			}
		}
		
		[Association(Name="CRCoSo_ThongSoKichThuoc", Storage="_CRCoSo", ThisKey="CRCS", OtherKey="ID", IsForeignKey=true)]
		public CRCoSo CRCoSo
		{
			get
			{
				return this._CRCoSo.Entity;
			}
			set
			{
				CRCoSo previousValue = this._CRCoSo.Entity;
				if (((previousValue != value) 
							|| (this._CRCoSo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CRCoSo.Entity = null;
						previousValue.ThongSoKichThuocs.Remove(this);
					}
					this._CRCoSo.Entity = value;
					if ((value != null))
					{
						value.ThongSoKichThuocs.Add(this);
						this._CRCS = value.ID;
					}
					else
					{
						this._CRCS = default(int);
					}
					this.SendPropertyChanged("CRCoSo");
				}
			}
		}
		
		[Association(Name="KSGX_ThongSoKichThuoc", Storage="_KSGX1", ThisKey="KSGX", OtherKey="ID", IsForeignKey=true)]
		public KSGX KSGX1
		{
			get
			{
				return this._KSGX1.Entity;
			}
			set
			{
				KSGX previousValue = this._KSGX1.Entity;
				if (((previousValue != value) 
							|| (this._KSGX1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._KSGX1.Entity = null;
						previousValue.ThongSoKichThuocs.Remove(this);
					}
					this._KSGX1.Entity = value;
					if ((value != null))
					{
						value.ThongSoKichThuocs.Add(this);
						this._KSGX = value.ID;
					}
					else
					{
						this._KSGX = default(int);
					}
					this.SendPropertyChanged("KSGX1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.ThongSoKichThuoc = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.ThongSoKichThuoc = null;
		}
	}
	
	[Table(Name="dbo.CxDxR")]
	public partial class CxDxR : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Value;
		
		private EntitySet<ThongSoKichThuoc> _ThongSoKichThuocs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public CxDxR()
		{
			this._ThongSoKichThuocs = new EntitySet<ThongSoKichThuoc>(new Action<ThongSoKichThuoc>(this.attach_ThongSoKichThuocs), new Action<ThongSoKichThuoc>(this.detach_ThongSoKichThuocs));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Value", DbType="NVarChar(100)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[Association(Name="CxDxR_ThongSoKichThuoc", Storage="_ThongSoKichThuocs", ThisKey="ID", OtherKey="CxDxRID")]
		public EntitySet<ThongSoKichThuoc> ThongSoKichThuocs
		{
			get
			{
				return this._ThongSoKichThuocs;
			}
			set
			{
				this._ThongSoKichThuocs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ThongSoKichThuocs(ThongSoKichThuoc entity)
		{
			this.SendPropertyChanging();
			entity.CxDxR = this;
		}
		
		private void detach_ThongSoKichThuocs(ThongSoKichThuoc entity)
		{
			this.SendPropertyChanging();
			entity.CxDxR = null;
		}
	}
	
	[Table(Name="dbo.CRCoSo")]
	public partial class CRCoSo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Value;
		
		private EntitySet<ThongSoKichThuoc> _ThongSoKichThuocs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public CRCoSo()
		{
			this._ThongSoKichThuocs = new EntitySet<ThongSoKichThuoc>(new Action<ThongSoKichThuoc>(this.attach_ThongSoKichThuocs), new Action<ThongSoKichThuoc>(this.detach_ThongSoKichThuocs));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Value", DbType="NVarChar(100)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[Association(Name="CRCoSo_ThongSoKichThuoc", Storage="_ThongSoKichThuocs", ThisKey="ID", OtherKey="CRCS")]
		public EntitySet<ThongSoKichThuoc> ThongSoKichThuocs
		{
			get
			{
				return this._ThongSoKichThuocs;
			}
			set
			{
				this._ThongSoKichThuocs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ThongSoKichThuocs(ThongSoKichThuoc entity)
		{
			this.SendPropertyChanging();
			entity.CRCoSo = this;
		}
		
		private void detach_ThongSoKichThuocs(ThongSoKichThuoc entity)
		{
			this.SendPropertyChanging();
			entity.CRCoSo = null;
		}
	}
	
	[Table(Name="dbo.KSGX")]
	public partial class KSGX : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Value;
		
		private EntitySet<ThongSoKichThuoc> _ThongSoKichThuocs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public KSGX()
		{
			this._ThongSoKichThuocs = new EntitySet<ThongSoKichThuoc>(new Action<ThongSoKichThuoc>(this.attach_ThongSoKichThuocs), new Action<ThongSoKichThuoc>(this.detach_ThongSoKichThuocs));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Value", DbType="NVarChar(100)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[Association(Name="KSGX_ThongSoKichThuoc", Storage="_ThongSoKichThuocs", ThisKey="ID", OtherKey="KSGX")]
		public EntitySet<ThongSoKichThuoc> ThongSoKichThuocs
		{
			get
			{
				return this._ThongSoKichThuocs;
			}
			set
			{
				this._ThongSoKichThuocs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ThongSoKichThuocs(ThongSoKichThuoc entity)
		{
			this.SendPropertyChanging();
			entity.KSGX1 = this;
		}
		
		private void detach_ThongSoKichThuocs(ThongSoKichThuoc entity)
		{
			this.SendPropertyChanging();
			entity.KSGX1 = null;
		}
	}
	
	[Table(Name="dbo.ThongSoHopSo")]
	public partial class ThongSoHopSo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private int _LHS_ID;
		
		private EntitySet<Product> _Products;
		
		private EntityRef<LHSo> _LHSo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLHS_IDChanging(int value);
    partial void OnLHS_IDChanged();
    #endregion
		
		public ThongSoHopSo()
		{
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			this._LHSo = default(EntityRef<LHSo>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_LHS_ID", DbType="Int NOT NULL")]
		public int LHS_ID
		{
			get
			{
				return this._LHS_ID;
			}
			set
			{
				if ((this._LHS_ID != value))
				{
					if (this._LHSo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLHS_IDChanging(value);
					this.SendPropertyChanging();
					this._LHS_ID = value;
					this.SendPropertyChanged("LHS_ID");
					this.OnLHS_IDChanged();
				}
			}
		}
		
		[Association(Name="ThongSoHopSo_Product", Storage="_Products", ThisKey="ID", OtherKey="TSHS_ID")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		[Association(Name="LHSo_ThongSoHopSo", Storage="_LHSo", ThisKey="LHS_ID", OtherKey="ID", IsForeignKey=true)]
		public LHSo LHSo
		{
			get
			{
				return this._LHSo.Entity;
			}
			set
			{
				LHSo previousValue = this._LHSo.Entity;
				if (((previousValue != value) 
							|| (this._LHSo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LHSo.Entity = null;
						previousValue.ThongSoHopSos.Remove(this);
					}
					this._LHSo.Entity = value;
					if ((value != null))
					{
						value.ThongSoHopSos.Add(this);
						this._LHS_ID = value.ID;
					}
					else
					{
						this._LHS_ID = default(int);
					}
					this.SendPropertyChanged("LHSo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.ThongSoHopSo = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.ThongSoHopSo = null;
		}
	}
	
	[Table(Name="dbo.LHSo")]
	public partial class LHSo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Value;
		
		private EntitySet<ThongSoHopSo> _ThongSoHopSos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public LHSo()
		{
			this._ThongSoHopSos = new EntitySet<ThongSoHopSo>(new Action<ThongSoHopSo>(this.attach_ThongSoHopSos), new Action<ThongSoHopSo>(this.detach_ThongSoHopSos));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Value", DbType="NVarChar(100)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[Association(Name="LHSo_ThongSoHopSo", Storage="_ThongSoHopSos", ThisKey="ID", OtherKey="LHS_ID")]
		public EntitySet<ThongSoHopSo> ThongSoHopSos
		{
			get
			{
				return this._ThongSoHopSos;
			}
			set
			{
				this._ThongSoHopSos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ThongSoHopSos(ThongSoHopSo entity)
		{
			this.SendPropertyChanging();
			entity.LHSo = this;
		}
		
		private void detach_ThongSoHopSos(ThongSoHopSo entity)
		{
			this.SendPropertyChanging();
			entity.LHSo = null;
		}
	}
	
	[Table(Name="dbo.Product")]
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private int _ModelID;
		
		private int _ManufactureID;
		
		private string _Description;
		
		private string _MadeIn;
		
		private System.Data.Linq.Binary _ImageData;
		
		private string _ImageMimeType;
		
		private int _TSKT_ID;
		
		private int _TSHS_ID;
		
		private System.Nullable<decimal> _Price;
		
		private System.Nullable<bool> _Status;
		
		private string _ImagePath;
		
		private EntityRef<Manufacture> _Manufacture;
		
		private EntityRef<Model> _Model;
		
		private EntityRef<ThongSoHopSo> _ThongSoHopSo;
		
		private EntityRef<ThongSoKichThuoc> _ThongSoKichThuoc;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnModelIDChanging(int value);
    partial void OnModelIDChanged();
    partial void OnManufactureIDChanging(int value);
    partial void OnManufactureIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnMadeInChanging(string value);
    partial void OnMadeInChanged();
    partial void OnImageDataChanging(System.Data.Linq.Binary value);
    partial void OnImageDataChanged();
    partial void OnImageMimeTypeChanging(string value);
    partial void OnImageMimeTypeChanged();
    partial void OnTSKT_IDChanging(int value);
    partial void OnTSKT_IDChanged();
    partial void OnTSHS_IDChanging(int value);
    partial void OnTSHS_IDChanged();
    partial void OnPriceChanging(System.Nullable<decimal> value);
    partial void OnPriceChanged();
    partial void OnStatusChanging(System.Nullable<bool> value);
    partial void OnStatusChanged();
    partial void OnImagePathChanging(string value);
    partial void OnImagePathChanged();
    #endregion
		
		public Product()
		{
			this._Manufacture = default(EntityRef<Manufacture>);
			this._Model = default(EntityRef<Model>);
			this._ThongSoHopSo = default(EntityRef<ThongSoHopSo>);
			this._ThongSoKichThuoc = default(EntityRef<ThongSoKichThuoc>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_ModelID", DbType="Int NOT NULL")]
		public int ModelID
		{
			get
			{
				return this._ModelID;
			}
			set
			{
				if ((this._ModelID != value))
				{
					if (this._Model.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModelIDChanging(value);
					this.SendPropertyChanging();
					this._ModelID = value;
					this.SendPropertyChanged("ModelID");
					this.OnModelIDChanged();
				}
			}
		}
		
		[Column(Storage="_ManufactureID", DbType="Int NOT NULL")]
		public int ManufactureID
		{
			get
			{
				return this._ManufactureID;
			}
			set
			{
				if ((this._ManufactureID != value))
				{
					if (this._Manufacture.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnManufactureIDChanging(value);
					this.SendPropertyChanging();
					this._ManufactureID = value;
					this.SendPropertyChanged("ManufactureID");
					this.OnManufactureIDChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(500)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_MadeIn", DbType="NVarChar(50)")]
		public string MadeIn
		{
			get
			{
				return this._MadeIn;
			}
			set
			{
				if ((this._MadeIn != value))
				{
					this.OnMadeInChanging(value);
					this.SendPropertyChanging();
					this._MadeIn = value;
					this.SendPropertyChanged("MadeIn");
					this.OnMadeInChanged();
				}
			}
		}
		
		[Column(Storage="_ImageData", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary ImageData
		{
			get
			{
				return this._ImageData;
			}
			set
			{
				if ((this._ImageData != value))
				{
					this.OnImageDataChanging(value);
					this.SendPropertyChanging();
					this._ImageData = value;
					this.SendPropertyChanged("ImageData");
					this.OnImageDataChanged();
				}
			}
		}
		
		[Column(Storage="_ImageMimeType", DbType="VarChar(50)")]
		public string ImageMimeType
		{
			get
			{
				return this._ImageMimeType;
			}
			set
			{
				if ((this._ImageMimeType != value))
				{
					this.OnImageMimeTypeChanging(value);
					this.SendPropertyChanging();
					this._ImageMimeType = value;
					this.SendPropertyChanged("ImageMimeType");
					this.OnImageMimeTypeChanged();
				}
			}
		}
		
		[Column(Storage="_TSKT_ID", DbType="Int NOT NULL")]
		public int TSKT_ID
		{
			get
			{
				return this._TSKT_ID;
			}
			set
			{
				if ((this._TSKT_ID != value))
				{
					if (this._ThongSoKichThuoc.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTSKT_IDChanging(value);
					this.SendPropertyChanging();
					this._TSKT_ID = value;
					this.SendPropertyChanged("TSKT_ID");
					this.OnTSKT_IDChanged();
				}
			}
		}
		
		[Column(Storage="_TSHS_ID", DbType="Int NOT NULL")]
		public int TSHS_ID
		{
			get
			{
				return this._TSHS_ID;
			}
			set
			{
				if ((this._TSHS_ID != value))
				{
					if (this._ThongSoHopSo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTSHS_IDChanging(value);
					this.SendPropertyChanging();
					this._TSHS_ID = value;
					this.SendPropertyChanged("TSHS_ID");
					this.OnTSHS_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Price", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="Bit")]
		public System.Nullable<bool> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Storage="_ImagePath", DbType="NVarChar(500)")]
		public string ImagePath
		{
			get
			{
				return this._ImagePath;
			}
			set
			{
				if ((this._ImagePath != value))
				{
					this.OnImagePathChanging(value);
					this.SendPropertyChanging();
					this._ImagePath = value;
					this.SendPropertyChanged("ImagePath");
					this.OnImagePathChanged();
				}
			}
		}
		
		[Association(Name="Manufacture_Product", Storage="_Manufacture", ThisKey="ManufactureID", OtherKey="ID", IsForeignKey=true)]
		public Manufacture Manufacture
		{
			get
			{
				return this._Manufacture.Entity;
			}
			set
			{
				Manufacture previousValue = this._Manufacture.Entity;
				if (((previousValue != value) 
							|| (this._Manufacture.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Manufacture.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._Manufacture.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._ManufactureID = value.ID;
					}
					else
					{
						this._ManufactureID = default(int);
					}
					this.SendPropertyChanged("Manufacture");
				}
			}
		}
		
		[Association(Name="Model_Product", Storage="_Model", ThisKey="ModelID", OtherKey="ID", IsForeignKey=true)]
		public Model Model
		{
			get
			{
				return this._Model.Entity;
			}
			set
			{
				Model previousValue = this._Model.Entity;
				if (((previousValue != value) 
							|| (this._Model.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Model.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._Model.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._ModelID = value.ID;
					}
					else
					{
						this._ModelID = default(int);
					}
					this.SendPropertyChanged("Model");
				}
			}
		}
		
		[Association(Name="ThongSoHopSo_Product", Storage="_ThongSoHopSo", ThisKey="TSHS_ID", OtherKey="ID", IsForeignKey=true)]
		public ThongSoHopSo ThongSoHopSo
		{
			get
			{
				return this._ThongSoHopSo.Entity;
			}
			set
			{
				ThongSoHopSo previousValue = this._ThongSoHopSo.Entity;
				if (((previousValue != value) 
							|| (this._ThongSoHopSo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ThongSoHopSo.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._ThongSoHopSo.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._TSHS_ID = value.ID;
					}
					else
					{
						this._TSHS_ID = default(int);
					}
					this.SendPropertyChanged("ThongSoHopSo");
				}
			}
		}
		
		[Association(Name="ThongSoKichThuoc_Product", Storage="_ThongSoKichThuoc", ThisKey="TSKT_ID", OtherKey="ID", IsForeignKey=true)]
		public ThongSoKichThuoc ThongSoKichThuoc
		{
			get
			{
				return this._ThongSoKichThuoc.Entity;
			}
			set
			{
				ThongSoKichThuoc previousValue = this._ThongSoKichThuoc.Entity;
				if (((previousValue != value) 
							|| (this._ThongSoKichThuoc.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ThongSoKichThuoc.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._ThongSoKichThuoc.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._TSKT_ID = value.ID;
					}
					else
					{
						this._TSKT_ID = default(int);
					}
					this.SendPropertyChanged("ThongSoKichThuoc");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
